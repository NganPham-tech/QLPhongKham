@{
    ViewData["Title"] = "Debug Appointments";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Debug Appointments</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <button type="button" class="btn btn-info" onclick="checkAppointments()">
                            Kiểm tra appointments trong DB
                        </button>
                        <button type="button" class="btn btn-warning" onclick="createTestAppointment()">
                            Tạo test appointment
                        </button>
                        <button type="button" class="btn btn-success" onclick="testUpdateStatus()">
                            Test cập nhật trạng thái
                        </button>
                    </div>
                    
                    <div id="debugOutput" class="mt-3">
                        <pre id="output" style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; max-height: 500px; overflow-y: auto;">
Kết quả debug sẽ hiển thị ở đây...
                        </pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function log(message) {
    const output = document.getElementById('output');
    const timestamp = new Date().toLocaleTimeString();
    output.textContent += `[${timestamp}] ${message}\n`;
    output.scrollTop = output.scrollHeight;
}

function checkAppointments() {
    log('Đang kiểm tra appointments...');
    
    fetch('@Url.Action("DebugAppointments", "Appointment")')
    .then(response => response.json())
    .then(data => {
        log(`Kết quả: ${JSON.stringify(data, null, 2)}`);
    })
    .catch(error => {
        log(`Lỗi: ${error.message}`);
    });
}

function createTestAppointment() {
    log('Đang tạo test appointment...');
    
    fetch('@Url.Action("CreateTestAppointment", "Appointment")')
    .then(response => response.json())
    .then(data => {
        log(`Kết quả: ${JSON.stringify(data, null, 2)}`);
    })
    .catch(error => {
        log(`Lỗi: ${error.message}`);
    });
}

function testUpdateStatus() {
    log('Đang test cập nhật trạng thái...');
    
    // Trước tiên lấy appointment đầu tiên
    fetch('@Url.Action("DebugAppointments", "Appointment")')
    .then(response => response.json())
    .then(data => {
        if (data.success && data.appointments && data.appointments.length > 0) {
            const firstAppointment = data.appointments[0];
            log(`Tìm thấy appointment ID: ${firstAppointment.Id}`);
            
            // Test cập nhật status
            const formData = new FormData();
            formData.append('id', firstAppointment.Id);
            formData.append('status', 'Completed');
            
            return fetch('@Url.Action("UpdateStatus", "Appointment")', {
                method: 'POST',
                body: formData
            });
        } else {
            throw new Error('Không có appointment nào để test');
        }
    })
    .then(response => response.json())
    .then(data => {
        log(`Kết quả update status: ${JSON.stringify(data, null, 2)}`);
    })
    .catch(error => {
        log(`Lỗi: ${error.message}`);
    });
}
</script>
